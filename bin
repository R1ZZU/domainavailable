#!/usr/bin/env node

const http     = require('http');
const punycode = require('punycode');
const readline = require('readline');

const baseUrl = `http://www.whoisxmlapi.com/whoisserver/WhoisService?cmd=GET_DN_AVAILABILITY&domainName=`;
const availabilityRegex = /<domainAvailability>(.*)<\/domainAvailability>/;

function request(domain) {
	return new Promise((resolve, reject) => {
		var reqUrl = `${baseUrl}${domain}`;

		http.get(reqUrl, (res) => {
			var responseText = '';
			res.setEncoding('utf-8');

			res.on('data', (b) => {
				responseText += b;
			});

			res.on('end', () => {
				var answer = resolveAnswer(responseText);
				resolve(answer);
			});
		});
	});
}

var answers = {
	'INVALID_DOMAIN_NAME': 'Are you high?',
	'AVAILABLE': ' ✔︎ Go ahead!',
	'UNAVAILABLE': ' ✘ Sorry bro..'
};

function resolveAnswer(responseText) {
	if (responseText.indexOf('<ErrorMessage>') > 0) {
		if (responseText.indexOf('is an invalid domain name') > 0) {
			return answers.INVALID_DOMAIN_NAME;
		} else {
			return responseText;
		}
	}

	try {
		return answers[responseText.match(availabilityRegex)[1]];
	} catch (err) {
		return responseText;
	}
}

var domain;

if (process.argv.length === 3) {
	domain = punycode.toASCII(process.argv[2]);
	request(domain)
		.then((result) => console.log(result));

	return;
}

const rl = readline.createInterface(process.stdin, process.stdout);
console.log('Which one?');

rl.prompt();

rl.on('line', line => {
	rl.pause();

	domain = punycode.toASCII(line);
	console.log(domain);

	request(domain)
		.then((result) => {
			console.log(result);
			rl.prompt();
		});
})
.on('close', () => {
	rl.write('Bye!');
	process.exit(0);
});
